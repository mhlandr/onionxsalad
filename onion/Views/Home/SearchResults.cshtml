@using MongoDB.Bson
@model List<BsonDocument>

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@Html.AntiForgeryToken()

<!-- This will get the antiforgery token and include it in JavaScript -->
<script>
    const token = '@Antiforgery.GetAndStoreTokens(Context).RequestToken';
</script>

<h2 style="text-align: center;">Search Ahmia</h2>

<!-- Main container to hold search results and screenshot -->
<div style="display: flex; justify-content: space-between; margin-top: 20px;">

    <!-- Left section: Search form and results -->
    <div style="flex: 1;">
        <form asp-action="Search" method="post" style="display: flex; flex-direction: column; align-items: center;">
            <div style="text-align: center;">
                <input type="text" name="searchTerm" placeholder="Enter search term" required style="padding: 10px; margin-bottom: 10px; width: 300px;" />
                <button type="submit" style="padding: 10px 20px;">Search</button>
            </div>
        </form>

        <ul>
            @if (Model != null && Model.Any())
            {
                @foreach (var result in Model)
                {
                    <li>
                        <strong>@result["site_name"]</strong> - @result["category"]
                        <br />
                        <a href="@result["onion_url"]" target="_blank">@result["onion_url"]</a>
                        <button type="button" onclick="copyToClipboard('@result["onion_url"]')">Copy URL</button>
                        <button type="button" onclick="checkOnlineStatus('@result["onion_url"]', this)">Check if Online</button>

                        <!-- New button for capturing the screenshot -->
                        <button type="button" onclick="captureScreenshot('@result["onion_url"]', this)">Capture Screenshot</button>

                        <span class="online-status"></span>
                        <br /><br />
                    </li>
                }
            }
            else
            {
                <li>No results found.</li>
            }
        </ul>
    </div>

    <!-- Right section: Screenshot display -->
    <div style="flex: 1; margin-left: 20px;">
        <h3>Captured Screenshot</h3>
        <div id="screenshot-container" style="text-align: center;">
            <img id="screenshot-preview" src="" alt="Screenshot" style="display: none; max-width: 100%; height: auto; border: 1px solid #ddd;">
        </div>
    </div>
</div>

<script>
    function copyToClipboard(url) {
        var tempInput = document.createElement("input");
        tempInput.value = url;
        document.body.appendChild(tempInput);
        tempInput.select();
        tempInput.setSelectionRange(0, 99999); // For mobile devices
        document.execCommand("copy");
        document.body.removeChild(tempInput);
    }

    function checkOnlineStatus(url, button) {
        if (!url.startsWith("http://") && !url.startsWith("https://")) {
            url = "http://" + url;
        }

        button.disabled = true;
        button.innerText = "Checking...";

        fetch('/Tor/CheckWebsiteStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ onionUrl: url })
        })
        .then(response => response.json())
        .then(data => {
            const statusSpan = button.nextElementSibling;
            if (data.isOnline) {
                statusSpan.textContent = "Online";
                statusSpan.style.color = "green";
            } else {
                statusSpan.textContent = "Offline";
                statusSpan.style.color = "red";
            }
        })
        .catch(error => {
            console.error('Error:', error);
        })
        .finally(() => {
            button.disabled = false;
            button.innerText = "Check if Online";
        });
    }

    async function captureScreenshot(onionUrl, button) {
        try {
            button.disabled = true;
            button.textContent = 'Capturing...';

            // Step 1: Enqueue the screenshot request
            const response = await fetch('/api/screenshot/capture', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ url: onionUrl })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to enqueue screenshot request');
            }

            const data = await response.json();
            const requestId = data.requestId;

            // Step 2: Poll for the status of the screenshot
            const pollInterval = 5000; // Poll every 5 seconds
            const maxAttempts = 12; // Maximum number of polling attempts (1 minute)
            let attempts = 0;

            const imgElement = document.getElementById('screenshot-preview');
            const statusCheck = setInterval(async () => {
                attempts++;

                try {
                    // Fetch the status of the screenshot request
                    const statusResponse = await fetch(`/api/screenshot/status/${requestId}`);

                    if (!statusResponse.ok) {
                        const errorData = await statusResponse.json();
                        throw new Error(errorData.error || 'Failed to get screenshot status');
                    }

                    const statusData = await statusResponse.json();

                    if (statusData.status === 'Completed') {
                        // Screenshot is ready
                        imgElement.src = statusData.screenshotPath; // Ensure the returned path is correct
                        imgElement.style.display = 'block';
                        button.textContent = 'Capture Screenshot';
                        clearInterval(statusCheck);
                        button.disabled = false;
                    } else if (statusData.status === 'Failed') {
                        // Screenshot capture failed
                        clearInterval(statusCheck);
                        button.disabled = false;
                        button.textContent = 'Capture Screenshot';
                        alert('Screenshot capture failed: ' + statusData.errorMessage);
                    } else {
                        // Still pending or processing, update button text
                        button.textContent = `Capturing... (${attempts * pollInterval / 1000}s)`;
                    }

                    if (attempts >= maxAttempts) {
                        // Max attempts reached
                        clearInterval(statusCheck);
                        button.disabled = false;
                        button.textContent = 'Capture Screenshot';
                        alert('Screenshot capture timed out. Please try again later.');
                    }
                } catch (pollError) {
                    clearInterval(statusCheck);
                    button.disabled = false;
                    button.textContent = 'Capture Screenshot';
                    console.error('Error while polling screenshot status:', pollError);
                    alert('An error occurred while checking the screenshot status. Please try again.');
                }
            }, pollInterval);
        } catch (error) {
            console.error('Error capturing screenshot:', error);
            alert('An error occurred while capturing the screenshot: ' + error.message);
            button.disabled = false;
            button.textContent = 'Capture Screenshot';
        }
    }

</script>
